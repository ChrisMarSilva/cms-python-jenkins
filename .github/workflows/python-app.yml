# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  # on: [push, pull_request, workflow_dispatch]
  push:
    #branches: [ main ]
    branches:
      - main
      - '*.x'
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '*.rst'
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+*'
    #tags: ['v[0-9].[0-9]+.[0-9]+*'] 
  pull_request:
    #branches: [ main ]
    branches:
      - main
      - '*.x'
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '*.rst'
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+*'
    #tags: ['v[0-9].[0-9]+.[0-9]+*']
  workflow_dispatch:
#  schedule:
#    - cron: '30 5,17 * * *'
#    - cron: '30 5 * * 1,3'
#    - cron: '30 5 * * 2,4'

jobs:

  CI:

    #if: ${{ startsWith(github.ref, 'refs/tags/') }} 
    runs-on: ubuntu-latest

    env:
      COVERAGE_SINGLE: 30
      COVERAGE_TOTAL: 30

    steps:

    - name: Chekout projeto
      uses: actions/checkout@v2

    - name: Deploy
      run: echo "Deploying tag ${{ github.ref }}"

    # - name: Only do this when tagged
    # if: startsWith(github.ref, 'refs/tags/')
    # run: echo "Hello tag ${{ github.ref }}"

    # -name: Check if Git tag exists
    #  run: echo "::set-env name=HEAD_TAG::$(git tag --points-at HEAD)"

    # -name: Runs only if Git tag exists 1
    #  run: echo"This runs because Git tag points at HEAD ..."
    #  if: env.HEAD_TAG != ''   

    # - name: Runs only if Git tag exists 2
    #   run: echo "This runs because Git tag points at HEAD ..."
    #   if:github.tag != ''  

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # - name: linting
    #   uses: alexanderdamiani/pylinter@v1.4.2
    #   with:
    #     python-root: '.'
    #     flake8-flags: '--count --show-source --statistics'
    #     mypy-flags: '--ignore-missing-imports'
    #     fail-on-isort: false

    # - name: commit isort changes
    #   run: |
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git add -A && git diff-index --cached --quiet HEAD || git commit -m 'isort'

    # - name: push isort changes
    #   uses: ad-m/github-push-action@v0.5.0
    #   with:
    #     github_token: ${{ secrets.GH_GITHUB_TOKEN }}
    #     branch: ${{ github.ref }}

    - name: Test with pytest
      run: |
        python -m pytest -vv

# **************************************************************************************************************** #
# This workflow will install Python dependencies, and run pytest --cov on all files recursively from the pytest-root-dir
# The workflow is also configured to exit with error if minimum individual file or total pytest coverage minimum not met
# If the workflow exits with error, an informative issue is created for the repo alerting the user
# If the workflow succeeds, a commit message is generated with the pytest --cov markdown table
#
# Variables to set:
#   * pytester action:
#     * pytest-root-dir: top-level directory to recursively check all .py files for pytest --cov
#     * cov-omit-list: comma separated str of all files and/or dirs to ignore
#   * env:
#     * cov-threshold-single: minimum individual file coverage required
#     * cov-threshold-total: minimum total coverage required
#
# Action outputs:
#   * output-table: `pytest --cov` markdown output table
#   * cov-threshold-single-fail: `false` if any single file coverage less than `cov-threshold-single`, else `true`
#   * cov-threshold-total-fail: `false` if total coverage less than `cov-threshold-total`, else `true`
#
# Workflows used:
#   * actions/checkout@v2: checkout files to perform additional actions on
#   * alexanderdamiani/pytester-cov@v1.2.3: runs pytest --cov and associated functions
#   * nashmaniac/create-issue-action@v1.1: creates issue for repo
#   * peter-evans/commit-comment@v1: adds message to commit
# **************************************************************************************************************** #
#
#    - name: pytester-cov
#      id: pytester-cov
#      uses: alexanderdamiani/pytester-cov@v1.2.3
#      with:
#        pytest-root-dir: '.'
#        cov-omit-list: 'test_*.py, run.py'
#        cov-threshold-single: ${{ env.COVERAGE_SINGLE }}
#        cov-threshold-total: ${{ env.COVERAGE_TOTAL }}
#
#    - name: Coverage single fail - new issue
#      if: ${{ steps.pytester-cov.outputs.cov-threshold-single-fail == 'true' }}
#      uses: nashmaniac/create-issue-action@v1.1
#      with:
#        title: Pytest coverage single falls below minimum ${{ env.COVERAGE_SINGLE }}
#        token: ${{secrets.GH_GITHUB_TOKEN}}
#        assignees: ${{github.actor}}
#        labels: worflow-failed
#        body: ${{ steps.pytester-cov.outputs.output-table }}
#
#    - name: Coverage single fail - exit
#      if: ${{ steps.pytester-cov.outputs.cov-threshold-single-fail == 'true' }}
#      run: |
#        echo "cov single fail ${{ steps.pytester-cov.outputs.cov-threshold-single-fail }}"
#        exit 1
#    - name: Coverage total fail - new issue
#      if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
#      uses: nashmaniac/create-issue-action@v1.1
#      with:
#        title: Pytest coverage total falls below minimum ${{ env.COVERAGE_TOTAL }}
#        token: ${{secrets.GH_GITHUB_TOKEN}}
#        assignees: ${{github.actor}}
#        labels: worflow-failed
#        body: ${{ steps.pytester-cov.outputs.output-table }}
#
#    - name: Coverage total fail - exit
#      if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
#      run: |
#        echo "cov single fail ${{ steps.pytester-cov.outputs.cov-threshold-total-fail }}"
#        exit 1
#    - name: Commit pytest coverage table
#      uses: peter-evans/commit-comment@v1
#      with:
#        body: ${{ steps.pytester-cov.outputs.output-table }}

# **************************************************************************************************************** #

    - name: Somente log da versao
      run: echo "github.run_number = ${{github.run_number}}"
#
#    - name: Build the Docker image
#      run: docker build . --file Dockerfile --tag cms-python-jenkins:$(date +%s)
#
#    - name: Set up QEMU
#      uses: docker/setup-qemu-action@v1
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v1
#
#    - name: Docker Login
#      uses: docker/login-action@v1
#      with:
#        username: ${{secrets.DOCKERHUB_USERNAME}}
#        password: ${{secrets.DOCKERHUB_TOKEN}}
#
#    - name: Build and push Docker images
#      uses: docker/build-push-action@v2
#      with:
#        push: true
#        context: .
#        tags: |
#          chrismarsilva/cms-python-jenkins:latest
#          chrismarsilva/cms-python-jenkins:${{github.run_number}}

# **************************************************************************************************************** #
#
#  CD:
#
#    #if: ${{ startsWith(github.ref, 'refs/tags/') }}
#    runs-on: ubuntu-latest
#    needs: [CI]
#
#    steps:
#
#    - name: Chekout projeto
#      uses: actions/checkout@v2

#    - name: Install doctl
#      uses: digitalocean/action-doctl@v2
#      with:
#        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#
#    - name: Setup Kubectl
#      uses: matootie/dokube@v1.3.3
#      with:
#        personalAccessToken: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#        clusterName: cms-tnb-cluster
#
#    - name: kubectl apply cronjob
#      run: kubectl apply -f docker-cronjob.yaml

  # - name: set image cronjob worker-limpeza
  #   run: kubectl set image cronjob worker-limpeza worker-limpeza=chrismarsilva/cms-tnb-limpeza:

  # - name: set image cronjob worker-alerta-admin
  #   run: kubectl set image cronjob worker-alerta-admin worker-alerta-admin=chrismarsilva/cms-tnb-alerta-admin:latest

#      - name: Kubernetes set context
#        uses: Azure/k8s-set-context@v1
#        with:
#          method: kubeconfig
#          kubeconfig: ${{secrets.K8S_CONFIG}}
#
#      - name: Deploy MongoDB
#        uses: Azure/k8s-deploy@v1.3
#        with:
#          manifests: |
#            k8s/mongodb/deployment.yaml
#            k8s/mongodb/service.yaml
#
#      - name: Deploy WebApi
#        uses: Azure/k8s-deploy@v1.3
#        with:
#          images: fabricioveronez/api-bootcamp-produto:${{github.run_number}}
#          manifests: |
#            k8s/api/deployment.yaml
#

# **************************************************************************************************************** #
#
#      - uses: akhileshns/heroku-deploy@v3.12.12
#        with:
#          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
#          heroku_app_name: "YOUR APP's NAME" #Must be unique in Heroku
#          heroku_email: "YOUR EMAIL"
#          branch: "main"
#### ⬇ IMPORTANT PART ⬇ ###
#
#      - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
#        uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).
#        with:
#          # Below you must provide variables for your Heroku app.
#
#          # The email address associated with your Heroku account.
#          # If you don't want to use repository secrets (which is recommended) you can do:
#          # email: my.email@example.com
#          email: ${{ secrets.HEROKU_EMAIL }}
#
#          # Heroku API key associated with provided user's email.
#          # Api Key is available under your Heroku account settings.
#          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
#
#          # Name of the heroku application to which the build is to be sent.
#          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
#
#          # (Optional, default: "./")
#          # Dockerfile directory.
#          # For example, if you have a Dockerfile in the root of your project, leave it as follows:
#          dockerfile_directory: ./
#
#          # (Optional, default: "Dockerfile")
#          # Dockerfile name.
#          dockerfile_name: Dockerfile
#
#          # (Optional, default: "")
#          # Additional options of docker build command.
#          docker_options: "--no-cache"
#
#          # (Optional, default: "web")
#          # Select the process type for which you want the docker container to be uploaded.
#          # By default, this argument is set to "web".
#          # For more information look at https://devcenter.heroku.com/articles/process-model
#          process_type: web

# **************************************************************************************************************** #


# # Controls when the workflow will run
# on:
#   workflow_dispatch
#   push:
#     branches:
#       - 'main'
#       - 'dev'
#     tags:
#       - 'v*.*.*'
#   pull_request:
#     branches:
#       - 'main'
#       - 'dev'

# # permissions are needed if pushing to ghcr.io
# permissions: 
#   packages: write

#           push: ${{ github.event_name != 'pull_request' }}
#           tags: ${{ steps.<meta_id>.outputs.tags }}
#           labels: ${{ steps.<meta_id>.outputs.labels }}
#  push: ${{ GitHub.event_name != 'pull_request' }}

#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}

#  if: GitHub.event_name != 'pull_request'
#           tags: ${{ steps.prep.outputs.tags }}

# push: ${{ github.ref == 'refs/heads/main' }}

# if: ${{ github.event_name == 'push' }} // OR
# if: ${{ github.event_name == 'pull_request' }}
#  run: echo ${{ steps.docker_build.outputs.digest }}


#  # Set output parameters.
#           echo ::set-output name=tags::${TAGS}
#           echo ::set-output name=docker_image::${DOCKER_IMAGE}


